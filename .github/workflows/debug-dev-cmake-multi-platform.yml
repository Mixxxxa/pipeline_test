# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: Analysis on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      targetPlatform:
        description: 'Platform to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - windows
        - linux
        - macos
      overrideAnalyzer:
        description: 'Подменить анализатор'
        required: true
        default: 'false'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read # for actions/checkout to fetch code
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        os: [windows-latest] #[ubuntu-latest, windows-latest, macos-latest]
        build_type: [Release]
        c_compiler: [gcc, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc
            cpp_compiler: g++
          - os: macos-latest
            c_compiler: gcc
            cpp_compiler: g++
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: ubuntu-latest
            c_compiler: cl
          - os: macos-latest
            c_compiler: cl

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
        echo "compile-db-filepath=${{ github.workspace }}/build/compile_commands.json" >> "$GITHUB_OUTPUT"

    - name: Install dev tools
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          sudo apt update
          sudo apt install ninja-build
        elif [ "$RUNNER_OS" == "Windows" ]; then
          choco install ninja pvs-studio
        elif [ "$RUNNER_OS" == "macOS" ]; then
          brew update
          brew install ninja
        else
          echo "$RUNNER_OS is not supported"
          exit 1
        fi
      shell: bash

    - name: Initialize MSVC development environment
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -GNinja
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -DCMAKE_EXPORT_COMPILE_COMMANDS=On
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Print Choco logs
      run: cat C:\ProgramData\chocolatey\logs\chocolatey.log

    - name: Download beta pvs-studio analyzer
      if: runner.os == 'Windows' and ${{ github.event.inputs.run_step == 'true' }}
      shell: powershell
      run: |
        $jsonResponse = Invoke-RestMethod -Uri "$env:BETA_ANALYZER_LINK"
        $directLink = $jsonResponse.href
        Invoke-WebRequest -Uri $directLink -OutFile ".\CompileCommandsAnalyzer.exe"

    # - name: Analyze with PVS-Studio (Simple)
    #   id: pvs-analysis-simple
    #   uses: Mixxxxa/pvsstudiopipeline/cpp-analysis@dev
    #   env:
    #     PVS_STUDIO_LICENSE_NAME: ${{secrets.PVS_STUDIO_NAME}}
    #     PVS_STUDIO_LICENSE_KEY: ${{secrets.PVS_STUDIO_KEY}}
    #   with:
    #     file-to-analyze: ${{ steps.strings.outputs.compile-db-filepath }}
    #     additional-args: |
    #       --analyze-specified-system-paths
    #       --disableLicenseExpirationCheck

    # - name: Analyze with PVS-Studio (Custom)
    #   id: pvs-analysis-custom
    #   uses: Mixxxxa/pvsstudiopipeline/cpp-analysis@dev
    #   env:
    #     PVS_STUDIO_LICENSE_NAME: ${{secrets.PVS_STUDIO_NAME}}
    #     PVS_STUDIO_LICENSE_KEY: ${{secrets.PVS_STUDIO_KEY}}
    #   with:
    #     file-to-analyze: ${{ steps.strings.outputs.compile-db-filepath }}
    #     analysis-mode: GA;OP;64;CS;MISRA;AUTOSAR;OWASP
    #     output-file: ${{ steps.strings.outputs.build-output-dir }}/pvs-report.log
    #     source-tree-root: ${{ github.workspace }}
    #     parallel: 2
    #     excluded-dirs: ${{ github.workspace }}/libs;${{ github.workspace }}/thirdparty
    #     suppress-files: |
    #       ${{ github.workspace }}/.PVS-Studio/falsealarms.suppress.json
    #       ${{ github.workspace }}/.PVS-Studio/legacy.suppress.json
    #     rules-configs: |
    #       ${{ github.workspace }}/.PVS-Studio/basic.pvsconfig
    #       ${{ github.workspace }}/.PVS-Studio/extra.pvsconfig
    #     additional-args: |
    #       --analyze-specified-system-paths
    #       --disableLicenseExpirationCheck
    
    # - name: Convert report (JSON)
    #   id: pvs-convert-json
    #   uses: Mixxxxa/pvsstudiopipeline/convert-report@dev
    #   with:
    #     input-files: ${{ steps.pvs-analysis-simple.outputs.raw-report }}
    #     output-format: 'json'
    #     output-file: ${{ steps.strings.outputs.build-output-dir }}/pvs-report.json

    # - name: Convert report (SARIF)
    #   id: pvs-convert-sarif
    #   uses: Mixxxxa/pvsstudiopipeline/convert-report@dev
    #   with:
    #     input-files: ${{ steps.pvs-analysis-simple.outputs.raw-report }}
    #     output-format: 'sarif'
    #     output-file: ${{ steps.strings.outputs.build-output-dir }}/pvs-report.sarif
    #     groups-and-levels: 'GA:1,2,3;OP:1,2,3;64:1,2,3;CS:1,2,3;MISRA:1,2,3;AUTOSAR:1,2,3;OWASP:1,2,3'
    #     excluded-paths: | 
    #       ${{ github.workspace }}/libs
    #       ${{ github.workspace }}/thirdparty
    #     path-transformation-mode: 'toAbsolute'
    #     source-tree-root: ${{ github.workspace }}

    # - name: Test
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest --build-config ${{ matrix.build_type }}

    # - name: Upload artifacts
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: 'pvs-${{ runner.os }}'
    #     path: |
    #       ${{ steps.pvs-analysis-simple.outputs.raw-report }}
    #       ${{ steps.pvs-analysis-custom.outputs.raw-report }}
    #       ${{ steps.strings.outputs.compile-db-filepath }}
    #       ${{ steps.pvs-convert-json.outputs.report }}
    #       ${{ steps.pvs-convert-sarif.outputs.report }}

    # - name: Publish static analysis report
    #   uses: github/codeql-action/upload-sarif@v3
    #   with:
    #     sarif_file: ${{ steps.pvs-convert-sarif.outputs.report }}
    #     category: PVS-Studio
